[{"title":"Connection","type":0,"sectionRef":"#","url":"/feature-flags/api/Connection","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/feature-flags/api/Connection#functions","content":" "},{"title":"disconnect​","type":1,"pageTitle":"Connection","url":"/feature-flags/api/Connection#disconnect","content":"&lt;/&gt; Connection.disconnect() → () Disconnects this connection.  "},{"title":"isConnected​","type":1,"pageTitle":"Connection","url":"/feature-flags/api/Connection#isConnected","content":"&lt;/&gt; Connection.isConnected() → boolean Checks if this function is currently connected. "},{"title":"Event","type":0,"sectionRef":"#","url":"/feature-flags/api/Event","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Event","url":"/feature-flags/api/Event#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"Event","url":"/feature-flags/api/Event#Connect","content":"&lt;/&gt; Event:Connect(callback: Callback) → Connection "},{"title":"Types","type":1,"pageTitle":"Event","url":"/feature-flags/api/Event##","content":""},{"title":"​","type":1,"pageTitle":"Event","url":"/feature-flags/api/Event#Callback","content":"type Callback = (...unknown) → ()   "},{"title":"Flag","type":0,"sectionRef":"#","url":"/feature-flags/api/Flag","content":"On this page Flag","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/feature-flags/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/feature-flags/docs/intro#installation","content":"To use Feature Flags, you need to include it as a dependency in yourwally.toml file. Feature Flags can then be installed with Wally. FeatureFlags = &quot;lasttalon/feature-flags@0.1.0&quot;  "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/feature-flags/docs/intro#usage","content":"To use Feature Flags in your project, simply require the module and access the hooks you want to use. For example, to use the ? ?: local FeatureFlags = require(ReplicatedStorage.Packages.MatterHooks)  Refer to the API documentation for a list of available hooks and their parameters. "},{"title":"FeatureFlags","type":0,"sectionRef":"#","url":"/feature-flags/api/FeatureFlags","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#types","content":" "},{"title":"RuleSet​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#RuleSet","content":"&lt;/&gt; interface RuleSet { activation: (( context: {[unknown]: unknown}?, ruleSet: {[unknown]: unknown}? ) → boolean)? allowedUsers: {[number]: true}? forbiddenUsers: {[number]: true}? allowedGroups: {[string]: true}? forbiddenGroups: {[string]: true}? allowedSystemStates: {[string]: true}? forbiddenSystemStates: {[string]: true}? abSegments: {[string]: number}? }   "},{"title":"FlagConfig​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#FlagConfig","content":"&lt;/&gt; interface FlagConfig { active: boolean ruleSets: {RuleSet}? }   "},{"title":"ChangeRecord​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ChangeRecord","content":"&lt;/&gt; interface ChangeRecord { old: FlagData? new: FlagData? }   "},{"title":"ActivationContext​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ActivationContext","content":"&lt;/&gt; interface ActivationContext { userId: number? groups: {[string]: true}? systemStates: {[string]: true}? abSegments: {[string]: true}? } The activation context.  "},{"title":"ActivationConfig​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ActivationConfig","content":"&lt;/&gt; interface ActivationConfig { default: boolean? allowRetire: boolean? warnExists: boolean? warnRetire: boolean? } The activation configuration. "},{"title":"Properties​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#Changed","content":"&lt;/&gt; FeatureFlags.Changed: Event  "},{"title":"Functions​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#functions","content":" "},{"title":"create​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#create","content":"&lt;/&gt; FeatureFlags.create( name: string, config: FlagConfig, retired: boolean? ) → ()   "},{"title":"exists​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#exists","content":"&lt;/&gt; FeatureFlags.exists(name: string) → boolean   "},{"title":"read​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#read","content":"&lt;/&gt; FeatureFlags.read(name: string) → FlagData "},{"title":"Types","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":""},{"title":"​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#FlagData","content":"interface FlagData { config: FlagConfig retired: boolean }    "},{"title":"update​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#update","content":"&lt;/&gt; FeatureFlags.update( name: string, config: FlagConfig ) → ()   "},{"title":"retire​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#retire","content":"&lt;/&gt; FeatureFlags.retire( name: string, retired: boolean? ) → ()   "},{"title":"destroy​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#destroy","content":"&lt;/&gt; FeatureFlags.destroy(name: string) → ()   "},{"title":"reset​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#reset","content":"&lt;/&gt; FeatureFlags.reset(notify: boolean?) → ()   "},{"title":"get​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#get","content":"&lt;/&gt; FeatureFlags.get(name: string) → PromiseTypes.Promise&lt;createFlag.Flag&gt;   "},{"title":"isActive​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#isActive","content":"&lt;/&gt; FeatureFlags.isActive( name: string, context: ActivationContext?, config: ActivationConfig? ) → boolean Determines if a flag should be active based on the provided context. "}]