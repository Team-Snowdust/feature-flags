[{"title":"Flag","type":0,"sectionRef":"#","url":"/feature-flags/api/Flag","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#properties","content":" "},{"title":"name​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flag.name: string The name of this flag. "},{"title":"Functions​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#functions","content":" "},{"title":"create​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#create","content":"&lt;/&gt; Flag.create(config: PartialFlagConfig) → () Creates a new flag with the provided configuration. caution Receiving a Flag object generally indicates that a flag already exists. Thecreate function should only be used to create flags that don't already exist. See: create "},{"title":"Errors","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag##","content":"Type\tDescription&quot;Flag '%s' already exists.&quot;\tThrown when a flag with this name already exists.  "},{"title":"exists​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#exists","content":"&lt;/&gt; Flag.exists() → boolean Checks if this flag currently exists. See: exists  "},{"title":"read​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#read","content":"&lt;/&gt; Flag.read() → FlagConfig Reads the data of this flag. See: read  "},{"title":"update​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#update","content":"&lt;/&gt; Flag.update(config: PartialFlagConfig) → () Updates the configuration of this flag. See: update  "},{"title":"retire​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#retire","content":"&lt;/&gt; Flag.retire(retired?: boolean) → () Sets the retired status of this flag. See: retire  "},{"title":"destroy​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#destroy","content":"&lt;/&gt; Flag.destroy() → () Removes this flag entirely. See: destroy  "},{"title":"isActive​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#isActive","content":"&lt;/&gt; Flag.isActive( context?: ActivationContext, config?: ActivationConfig ) → boolean Checks if a feature flag is active based on provided context and configuration. See: isActive  "},{"title":"onChange​","type":1,"pageTitle":"Flag","url":"/feature-flags/api/Flag#onChange","content":"&lt;/&gt; Flag.onChange(callback: (record: ChangeRecord) → ()) → Connection Subscribe to the changed event for this flag. This callback is only invoked when this flag is changed. See: Changed "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/feature-flags/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/feature-flags/docs/intro#installation","content":"To use Feature Flags, you need to include it as a dependency in yourwally.toml file. Feature Flags can then be installed with Wally. FeatureFlags = &quot;team-snowdust/feature-flags@0.1.0&quot;  "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/feature-flags/docs/intro#usage","content":"To place features behind flags in your project, simply require the module and access the flags you want to use and check if they're active. For example, to use the newHeroUpdate flag we can request it asynchronously: local FeatureFlags = require(ReplicatedStorage.Packages.FeatureFlags) -- Asynchronously request our new hero feature flag. FeatureFlags.get(&quot;newHeroUpdate&quot;):andThen(function(flag: FeatureFlags.Flag) -- When the flag exists, check if it's active for the current user context. if flag.isActive({ userId = Players.LocalPlayer.UserId, groups = { beta = isBetaTester(Players.LocalPlayer) }, }) then -- The new hero is active for this user. Show off the new hero. displayNewHeroShowcase() else -- The new hero is not active for this user. Tease the hero that will be -- available soon. displayNewHeroTeaser() end end)  Refer to the API documentation for more detailed information. "},{"title":"FeatureFlags","type":0,"sectionRef":"#","url":"/feature-flags/api/FeatureFlags","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#types","content":" "},{"title":"RuleSet​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#RuleSet","content":"&lt;/&gt; interface RuleSet { activation?: (( context?: {[unknown]: unknown}, ruleSet?: {[unknown]: unknown} ) → boolean)-- A custom activation function to evaluate allowedUsers?: {[number]: true}-- A set of user IDs that must match forbiddenUsers?: {[number]: true}-- A set of user IDs that may not match allowedGroups?: {[string]: true}-- A set of groups that must match forbiddenGroups?: {[string]: true}-- A set of groups that may not much allowedSystemStates?: {[string]: true}-- A set of system states that must match forbiddenSystemStates?: {[string]: true}-- A set of system states that may not match abSegments?: {[string]: number}-- A map of AB testing segments } A rule set to determine if a feature should be active for a given context. When a rule set is evaluated against a context, all parts of the rule set must be true for this rule set to pass. If no rule sets match then this rule set will not apply. See isActive for a more detailed explanation. AB testing segments are provided as a map of segment names to segment proportions. All testing segment proportions are added together when selecting a segment to determine the total proportion rather than using a percentage. This enables more specific and configurable group proportions than strict percentages may allow. create(&quot;abTestFlag&quot;, { active: true, ruleSets: { { -- Our AB testing rule set abSegments = { -- Our total proportion is 8, so we're selecting out of 8 total. segment1 = 5, -- This segment accounts for 5/8ths of the population. segment2 = 2, -- This segment accounts for 2/8ths, or 1/4th. segment3 = 1, -- This segment accounts for 1/8th. }, }, }, })   "},{"title":"FlagConfig​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#FlagConfig","content":"&lt;/&gt; interface FlagConfig { active: boolean-- Whether the flag is active retired: boolean-- Whether this flag is retired ruleSets: {RuleSet}-- Rule sets to evaluate for this configuration } The configuration of a flag. Rule sets will be evaluated one at a time to determine if an activation context should have this feature active. See isActive for a more detailed explanation. info The active property controls whether this flag can be active for anyone. If this is false, no one will have this feature active. If a flag should be active in some circumstances, use rule sets.  "},{"title":"PartialFlagConfig​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#PartialFlagConfig","content":"&lt;/&gt; interface PartialFlagConfig { active?: boolean-- Whether the flag is active retired?: boolean-- Whether this flag is retired ruleSets?: {RuleSet}-- Rule sets to evaluate for this configuration } A partial flag configuration. This is used to update a flag. Any properties that are nil will not be updated.  "},{"title":"ChangeRecord​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ChangeRecord","content":"&lt;/&gt; interface ChangeRecord { old?: FlagConfig-- The old flag, or nil if the flag was just created new?: FlagConfig-- The new flag, or nil if the flag no longer exists } A record of how a flag has changed.  "},{"title":"UpdateOptions​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#UpdateOptions","content":"&lt;/&gt; interface UpdateOptions { serialize: boolean-- Whether this change should be serialized } Options for updating a flag. These are options for how a flag should be updated. Here you can specify whether this change should be serialized. The default is false.  "},{"title":"PartialUpdateOptions​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#PartialUpdateOptions","content":"&lt;/&gt; interface PartialUpdateOptions { serialize?: boolean-- Whether this change should be serialized } Partial update options. This is used to configure a flag update. Any properties that are nil will be given default values.  "},{"title":"ActivationContext​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ActivationContext","content":"&lt;/&gt; interface ActivationContext { userId: number?-- The ID of the user groups: {[string]: true}?-- A set of groups systemStates: {[string]: true}?-- A set of system states abSegments: {[string]: true}?-- A set of AB segments } The ActivationContext for a feature' activation. Represents user ID, groups, system states, and AB segments that inform feature activation. These parameters allow features to operate under different rules based on their specific context. For instance, features may activate for specific user groups, AB segments, or under certain system states. Default behavior is applied if a context parameter is not provided. local userContext = { userId = 12345, -- Replace with actual user ID groups = { betaTesters = true }, -- User is in the 'betaTesters' group systemStates = { lowLoad = true }, -- System is currently under low load abSegments = { testA = true }, -- User is in the 'testA' AB segment } if isActive(&quot;ourFeature&quot;, userContext) then -- Our feature is active for this particular context end   "},{"title":"ActivationConfig​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#ActivationConfig","content":"&lt;/&gt; interface ActivationConfig { default: boolean?-- Default activation status if the feature doesn't exist allowRetire: boolean?-- Flag to allow retirement of the feature; if not set and the flag is retired, this notifies in the console warnExists: boolean?-- Flag to warn rather than error when a feature doesn't exist warnRetire: boolean?-- Flag to warn rather than error when a feature is retired } The configuration parameters for a feature's activation. This determines the default state and warning behavior of a feature. This can assist with development of features behind flags, such as throwing errors when flags are being used that are no longer meant to be used. if isActive(&quot;newUI&quot;, userContext, { default = true, -- Assume the feature is active if not found (do not notify) allowRetire = false, -- Notify if the flag has been retired warnRetire = false, -- Error if the flag is retired }) then -- Load the new user interface else -- Load the old user interface end  "},{"title":"Properties​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#Changed","content":"&lt;/&gt; FeatureFlags.Changed: Event The flag changed event. This fires every time a flag changes. It provides the name, a ChangeRecord, and UpdateOptions. Changed:Connect(function(name: string, record: ChangeRecord, options: UpdateOptions) print(string.format(&quot;Flag '%s' changed.&quot;, name)) print(&quot;Old flag:&quot;, record.old) print(&quot;New flag:&quot;, record.new) if options.serialize then print(&quot;This change will be serialized.&quot;) end end)  "},{"title":"Functions​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#functions","content":" "},{"title":"create​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#create","content":"&lt;/&gt; FeatureFlags.create( name: string,-- The name to use for the flag config: PartialFlagConfig?,-- The configuration of this flag options: PartialUpdateOptions? ) → () Creates a new flag with the provided name and configuration. note This only needs to be used when introducing new flags, such as when you want to introduce a new flag for a feature ahead of time. This is typically done through some configuration interface, such as the built in one. tip If updating a flag that already exists, use the update function instead. "},{"title":"Errors","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":"Type\tDescription&quot;Flag '%s' already exists.&quot;\tThrown when a flag with this name already exists.  "},{"title":"exists​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#exists","content":"&lt;/&gt; FeatureFlags.exists(name: string) → boolean Checks if a flag with this name currently exists.  "},{"title":"read​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#read","content":"&lt;/&gt; FeatureFlags.read(name: string) → FlagConfig Reads the data of this flag. This is primarily useful to display or manipulate flag information. caution This shouldn't be used to determine flag activation. Use the isActive function instead. While this contains all flag information, it doesn't include any complex activation evaluation logic that isActive does. "},{"title":"Errors","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":"Type\tDescription&quot;Flag '%s' doesn't exist.&quot;\tThrown when a flag with this name doesn't exist.  "},{"title":"update​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#update","content":"&lt;/&gt; FeatureFlags.update( name: string, config: PartialFlagConfig, options: PartialUpdateOptions? ) → () Updates the configuration of this flag. "},{"title":"Errors","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":"Type\tDescription&quot;Flag '%s' doesn't exist.&quot;\tThrown when a flag with this name doesn't exist.  "},{"title":"retire​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#retire","content":"&lt;/&gt; FeatureFlags.retire( name: string, retired?: boolean,-- The retired status of the flag options: PartialUpdateOptions? ) → () Sets the retired status of a flag. If a retired status isn't provided it defaults to true, assuming you intend to retire a flag. "},{"title":"Errors","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":"Type\tDescription&quot;Flag '%s' doesn't exist.&quot;\tThrown when a flag with this name doesn't exist.  "},{"title":"destroy​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#destroy","content":"&lt;/&gt; FeatureFlags.destroy( name: string, options: PartialUpdateOptions? ) → () Removes a flag entirely. "},{"title":"Errors","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags##","content":"Type\tDescription&quot;Flag '%s' doesn't exist.&quot;\tThrown when a flag with this name doesn't exist.  "},{"title":"reset​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#reset","content":"&lt;/&gt; FeatureFlags.reset( notify?: boolean-- Whether to notify listeners of this change ) → () Resets all registered flags. After this operation, there will be no registered flags and flags will need to be registered again before they can be used. This is primarily used to re-initialize all feature flags. Notification will inform all listeners about the removal of all flags. Performing no notification is faster, but may break features currently listening. The default is not to notify, assuming that features listening to flags have already been handled or are not currently listening.  "},{"title":"isActive​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#isActive","content":"&lt;/&gt; FeatureFlags.isActive( name: string,-- The name of the feature flag to check context?: ActivationContext,-- The user context for this feature activation config?: ActivationConfig-- The configuration parameters for this feature activation ) → boolean-- Whether the feature should be active Checks if a feature flag is active based on provided context and configuration. The isActive function evaluates whether a feature should be active based on the provided user context and configuration. It normalizes these inputs, using default values for any missing context or configuration properties. if isActive(&quot;uiUpdate&quot;, { userId = 1000, groups = { beta = true }, abSegments = { newInventory = true }, }) then -- The user with this context should have this feature active. end The feature flag's existence and retirement status are then checked: If the feature doesn't exist, the behavior depends on the warnExists and default configuration properties. If warnExists is true, a warning is logged. If default is provided, the default value is returned. If neither a warning is logged nor a default value is provided, an error is thrown. If nothing else causes the function to terminate a default value of false is returned. if isActive(&quot;missingFlag&quot;, activationContext, { default = true, warnExists = true, }) then -- If the flag no longer exists we still execute this code. -- A warning is logged rather than an error. else -- The flag exists, but is set to false. end If the feature is retired, the behavior depends on the allowRetire and warnRetire configuration properties. If allowRetire is false, an error is thrown. If allowRetire is true but warnRetire is true as well, a warning is logged. if isActive(&quot;oldFlag&quot;, activationContext, { allowRetire = true, warnRetire = true, }) then -- A retired flag can still be checked, but a warning is logged. end The flag's active status is then checked. If the flag isn't active, then false is returned immediately. info An inactive flag indicates it should not be active for anyone or under any circumstances. To activate a feature conditionally rule sets should be used. If the flag is active, each rule set in the feature flag's configuration is evaluated using the provided context: If a rule set evaluates to true, the feature is active. If no rule set evaluates to true, but at least one rule set was evaluated (i.e., it matched the context even though it evaluated to false), the feature is not active. If no rule set matches the context (i.e., none of the rule sets were evaluated), this means that no rules apply to disable a feature for the provided context. The feature is considered active. caution This is sometimes unintuitive for users unfamiliar with it. Consider the case where a rule set to activate a feature for a specific user ID is configured but the feature is being activated without a user context, such as on the server. In such a case, the user restriction should not be considered matching and the feature should be considered active if no other rules apply.   "},{"title":"get​","type":1,"pageTitle":"FeatureFlags","url":"/feature-flags/api/FeatureFlags#get","content":"&lt;/&gt; FeatureFlags.get( name: string-- The name of the flag ) → Promise&lt;Flag&gt;-- A Promise of the Flag requested Gets a flag asynchronously. get(&quot;newActivity&quot;):andThen(function(flag: Flag) -- The flag is available to use. if flag.isActive() then -- The flag is active. end end)  "}]