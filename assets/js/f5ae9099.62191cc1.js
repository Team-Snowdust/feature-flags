"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||g[m]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1732:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:1},l="Client-Server Communication",o={unversionedId:"guides/client-server",id:"guides/client-server",title:"Client-Server Communication",description:"Setting up robust communication between client and server for feature flags can",source:"@site/docs/guides/client-server.md",sourceDirName:"guides",slug:"/guides/client-server",permalink:"/feature-flags/docs/guides/client-server",draft:!1,editUrl:"https://github.com/Team-Snowdust/feature-flags/edit/main/docs/guides/client-server.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/feature-flags/docs/intro"},next:{title:"Preferring Predicates",permalink:"/feature-flags/docs/guides/predicates"}},s={},c=[{value:"Step 1: Decide What Needs Communication",id:"step-1-decide-what-needs-communication",level:2},{value:"Rationale",id:"rationale",level:3},{value:"Step 2: Use the <code>Changed</code> Event",id:"step-2-use-the-changed-event",level:2},{value:"Step 3: Choose a Communication Method",id:"step-3-choose-a-communication-method",level:2},{value:"Method A: Using Remote Events (Recommended)",id:"method-a-using-remote-events-recommended",level:3},{value:"Method B: Transmitting Flags as Attributes (Alternative)",id:"method-b-transmitting-flags-as-attributes-alternative",level:3},{value:"Step 4: Handling Activation Functions",id:"step-4-handling-activation-functions",level:2},{value:"How to Pass Activation Functions",id:"how-to-pass-activation-functions",level:3}],u={toc:c},d="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client-server-communication"},"Client-Server Communication"),(0,i.kt)("p",null,"Setting up robust communication between client and server for feature flags can\nbe daunting. While our library doesn't handle this out-of-the-box, there's a\ngood reason: we want to ensure flexibility and give you control. This guide will\nprovide best practices and step-by-step instructions on achieving seamless\nclient-server communication for your feature flags."),(0,i.kt)("h2",{id:"step-1-decide-what-needs-communication"},"Step 1: Decide What Needs Communication"),(0,i.kt)("p",null,"Not all flags should be sent to the client."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Server-Only Flags"),": These flags are only relevant to server operations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sensitive Flags"),": If a flag contains configurations or data that shouldn't\nbe publicly accessible, keep it on the server.")),(0,i.kt)("h3",{id:"rationale"},"Rationale"),(0,i.kt)("p",null,"Why doesn't the library handle this for you?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flexibility"),": Not all feature flags are meant for client-side visibility.\nSome may be server-side only, while others are crucial for client operations.\nBy not automatically sending all flags to the client, we give developers the\ndiscretion to choose which flags to transmit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data Privacy"),": Not every flag should be visible to the client, especially\nif it contains sensitive information or configurations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Efficiency"),": Automatically sending all flags can be a waste of bandwidth\nand resources, especially if many flags are not pertinent to the client.")),(0,i.kt)("h2",{id:"step-2-use-the-changed-event"},"Step 2: Use the ",(0,i.kt)("inlineCode",{parentName:"h2"},"Changed")," Event"),(0,i.kt)("p",null,"Efficiently listen to flag changes with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Changed")," event."),(0,i.kt)("p",null,"Whenever a feature flag is updated, the library emits a ",(0,i.kt)("inlineCode",{parentName:"p"},"Changed")," event. Attach\na listener to this event to detect and manage updates efficiently."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"FeatureFlags.Changed:Connect(function(name, record)\n    -- Handle the flag change here\nend)\n")),(0,i.kt)("h2",{id:"step-3-choose-a-communication-method"},"Step 3: Choose a Communication Method"),(0,i.kt)("p",null,"Consider your game's needs and the number of flags when choosing a method. We\nrecommend the ",(0,i.kt)("strong",{parentName:"p"},"Remote Events")," method for its clarity and straightforward\nimplementation."),(0,i.kt)("h3",{id:"method-a-using-remote-events-recommended"},"Method A: Using Remote Events (Recommended)"),(0,i.kt)("p",null,"Perfect for dynamic datasets and games with a larger number of flags."),(0,i.kt)("p",null,"First, we need to transmit flags to the client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="transmitFlags.server.lua"',title:'"transmitFlags.server.lua"'},'local Players = game:GetService("Players")\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal FlagEvent = Instance.new("RemoteEvent")\nFlagEvent.Name = "FlagEvent"\nFlagEvent.Parent = ReplicatedStorage\n\n-- Transmit flag changes to the client\nFeatureFlags.Changed:Connect(function(name, record)\n    FlagEvent:FireAllClients(name, record.new)\nend)\n\n-- Transmit existing flags to the client\nPlayers.PlayerAdded:Connect(function(player)\n    for name, flag in FeatureFlags.getAllFlags() do\n        FlagEvent:FireClient(player, name, flag)\n    end\nend)\n')),(0,i.kt)("p",null,"Then, we find the event on the client and receive the flag changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="receiveFlags.client.lua"',title:'"receiveFlags.client.lua"'},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal FlagEvent = ReplicatedStorage:WaitForChild("FlagEvent")\n\n-- Listen for flag events\nFlagEvent.OnClientEvent:Connect(function(name, data)\n    if data then\n        if FeatureFlags.exists(name) then\n            FeatureFlags.update(name, data)\n        else\n            FeatureFlags.create(name, data)\n        end\n    else\n        FeatureFlags.delete(name)\n    end\nend)\n')),(0,i.kt)("h3",{id:"method-b-transmitting-flags-as-attributes-alternative"},"Method B: Transmitting Flags as Attributes (Alternative)"),(0,i.kt)("p",null,"This method can be useful in certain scenarios but comes with added intricacies.\nEnsure you understand its workings fully before adopting."),(0,i.kt)("p",null,"First, we create our attribute serialization logic."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Serialize.lua"',title:'"Serialize.lua"'},'local HttpService = game:GetService("HttpService")\nlocal Workspace = game:GetService("Workspace")\n\nlocal Prefix = "flag"\nlocal PrefixFormat = string.format("%s_%s", Prefix, "%s")\n\n-- Serialize and write a flag to the Workspace\nlocal function writeFlag(name, flag)\n    Workspace:SetAttribute(string.format(PrefixFormat, name), HttpService:JSONEncode(flag))\nend\n\n-- Read and deserialize flag data\nlocal function readFlag(flagData)\n    return HttpService:JSONDecode(flagData)\nend\n\n-- Read and deserialize a flag from the Workspace\nlocal function readFlagByName(name)\n    return readFlag(Workspace:GetAttribute(string.format(PrefixFormat, name)))\nend\n\nreturn {\n    Prefix = Prefix,\n    PrefixFormat = PrefixFormat,\n\n    writeFlag = writeFlag,\n    readFlag = readFlag,\n    readFlagByName = readFlagByName,\n}\n')),(0,i.kt)("p",null,"Next, we need to transmit flags to the client using the serialization we wrote."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="transmitFlags.server.lua"',title:'"transmitFlags.server.lua"'},"local Serialize = require(script.Parent.Serialize)\n\n-- Transmit flag changes to the client\nFeatureFlags.Changed:Connect(function(name, record)\n    Serialize.writeFlag(name, record.new)\nend)\n\n-- Transmit existing flags to the client\nfor name, flag in FeatureFlags.getAllFlags() do\n    Serialize.writeFlag(name, flag)\nend\n")),(0,i.kt)("p",null,"Finally, we receive flags on the client using our serialization."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="receiveFlags.client.lua"',title:'"receiveFlags.client.lua"'},'local Workspace = game:GetService("Workspace")\nlocal Serialize = require(script.Parent.Serialize)\n\n-- Handle any attributes\nlocal function handleAttribute(name, value)\n    local prefix, key = string.match(name, "^([^_]+)_(.+)$")\n\n    if prefix == Serialize.Prefix then\n        -- Receive flag changes\n        local flagName = key\n\n        if value then\n            local flag = Serialize.read(value)\n\n            if FeatureFlags.exists(flagName) then\n                FeatureFlags.update(flagName, flag)\n            else\n                FeatureFlags.create(flagName, flag)\n            end\n        else\n            FeatureFlags.delete(flagName)\n        end\n    elseif ... then\n        -- Handle other unrelated attribute changes\n    end\nend\n\n-- Listen for attribute changes\nWorkspace.AttributeChanged:Connect(function(name)\n    handleAttribute(name, Workspace:GetAttribute(name))\nend)\n\n-- Receive existing attributes\nfor name, value in Workspace:GetAttributes() do\n    handleAttribute(name, value)\nend\n')),(0,i.kt)("h2",{id:"step-4-handling-activation-functions"},"Step 4: Handling Activation Functions"),(0,i.kt)("p",null,"Always ensure the client is aware of how to handle activation functions, as\nthese can't be directly serialized."),(0,i.kt)("p",null,"If your flags contain activation functions, they need special treatment.\nConsider sending a signal or a specific data structure to inform the client when\nthey need to execute a specific predefined function."),(0,i.kt)("h3",{id:"how-to-pass-activation-functions"},"How to Pass Activation Functions"),(0,i.kt)("p",null,"The key challenge with activation functions is that they aren't directly\nserializable. However, a viable approach involves the use of a reference system.\nRather than passing the function, you pass an identifier for the function. The\nclient-side should have a corresponding set of functions to match these\nidentifiers."),(0,i.kt)("p",null,"First, we need a shared module defining the activation functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="ActivationFunctions.lua"',title:'"ActivationFunctions.lua"'},"-- Require all necessary activation functions\n...\n\n-- Define a dictionary of function identifiers to functions\nlocal activationFunctions = {\n    increasedSpeed = increasedSpeed,\n    networkCheck = networkCheck,\n}\n\n-- Define the inverse lookup table\nlocal activationFunctionsInverse = {}\nfor name, value in activationFunctions do\n    activationFunctionsInverse[value] = name\nend\n\nreturn {\n    ToFunction = activationFunctions,\n    ToIdentifier = activationFunctionsInverse,\n}\n")),(0,i.kt)("p",null,"Then, we can use this when we transmit our flags."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="transmitFlags.server.lua"',title:'"transmitFlags.server.lua"'},"-- All previous imports\n\nlocal ActivationFunctions = require(ReplicatedStorage.ActivationFunctions)\n\n-- Snip\n\nFeatureFlags.Changed:Connect(function(name, record)\n    local transmissionRecord = clone(record.new)\n\n    -- Convert the activation functions to identifiers\n    for _, ruleSet in transmissionRecord.ruleSets do\n        if ruleSet.activation then\n            ruleSet.activation = ActivationFunctions.ToIdentifier[ruleSet.activation]\n        end\n    end\n\n    FlagEvent:FireAllClients(name, transmissionRecord)\nend)\n\n-- Snip\n")),(0,i.kt)("p",null,"And also when we receive our flags."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="receiveFlags.client.lua"',title:'"receiveFlags.client.lua"'},"-- All previous imports\n\nlocal ActivationFunctions = require(ReplicatedStorage.ActivationFunctions)\n\n-- Snip\n\nFlagEvent.OnClientEvent:Connect(function(name, data)\n    if data then\n        -- Convert the activation identifiers into functions\n        for _, ruleSet in data.ruleSets do\n            if ruleSet.activation then\n                ruleSet.activation = ActivationFunctions.ToFunction[ruleSet.activation]\n            end\n        end\n\n        -- Snip\n    end\nend)\n")))}g.isMDXComponent=!0}}]);